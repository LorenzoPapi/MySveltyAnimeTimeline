{"version":3,"sources":["util/MalApi.ts","components/Misc.tsx","util/Visualisation.ts","util/Utils.ts","components/Controls.tsx","components/App.tsx","index.tsx"],"names":["ListType","Links","React","memo","links","linkComponents","i","length","url","description","isLast","push","Fragment","key","href","EntryStatus","SupportedListTypes","Anime","Manga","DisplayType","getUrlParameter","name","replace","results","RegExp","exec","location","search","decodeURIComponent","getConfigFromUrlParameters","username","listType","cap","Math","round","Number","displayType","padNumber","x","toString","formatDate","date","getFullYear","getMonth","getDate","SupportedDisplayTypes","Point","Box","Range","Controls","config","defaultUsername","defaultListType","defaultCapAt1k","defaultDisplayType","includes","useState","setUsername","setListType","capAt1k","setCapAt1k","setDisplayType","className","htmlFor","type","id","required","placeholder","value","onChange","e","target","checked","App","controlsVisible","setControlsVisible","visualisationStatus","setVisualisationStatus","useEffect","uri","encodeURI","requestUrl","Promise","resolve","then","request","get","accept","response","status","body","list_entries","getMalListEntries","listEntries","dataset","entry","entryDetails","node","entryStatus","list_status","Completed","start","end","start_date","finish_date","startsWith","Date","toUTCString","isNaN","getTime","updated_at","moment","add","toDate","setDate","record","content","title","sort","a","b","localeCompare","prepareVisJsDataset","dataset_subset","slice","console","log","container","document","getElementById","items","vis","DataSet","options","height","align","zoomMax","zoomMin","Timeline","drawVisJsTimeline","catch","error","message","toggleControls","useCallback","prevState","onClick","ReactDOM","render","StrictMode"],"mappings":";iMAQYA,E,uCCGCC,G,MAAQC,IAAMC,MAAiB,YAExC,IAFsD,IAAZC,EAAW,EAAXA,MACpCC,EAAiB,GACdC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAG,CAAC,IAAD,cACRF,EAAME,GADE,GAC5BE,EAD4B,KACvBC,EADuB,KAE7BC,EAASJ,IAAMF,EAAMG,OAAS,EACpCF,EAAeM,KAAK,kBAAC,IAAMC,SAAP,CAAgBC,IAAG,eAAUP,IAC7C,uBAAGQ,KAAMN,GAAMC,GAAiBC,EAAS,GAAK,OAGtD,OAAO,4DAAkCL,O,0CDZjCL,K,cAAAA,E,eAAAA,M,KAKL,IAEKe,EAFCC,EAAqB,CAAChB,EAASiB,MAAOjB,EAASkB,Q,SAEhDH,K,sBAAAA,E,4BAAAA,E,qBAAAA,M,KA0BL,IE/BKI,ECLCC,EAAkB,SAACC,GAC5BA,EAAOA,EAAKC,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,OAClD,IAEMC,EAFQ,IAAIC,OAAO,SAAWH,EAAO,aAErBI,KAAKC,SAASC,QACpC,OAAmB,OAAZJ,EAAmB,GAAKK,mBAAmBL,EAAQ,GAAGD,QAAQ,MAAO,OAGnEO,EAA6B,WACtC,MAAO,CACHC,SAAUV,EAAgB,YAC1BW,SAAUX,EAAgB,aAC1BY,IAAKC,KAAKC,MAAMC,OAAOf,EAAgB,SACvCgB,YAAahB,EAAgB,kBAI/BiB,EAAY,SAACC,GACf,OAAQA,EAAI,GAAO,IAAMA,EAAKA,EAAEC,YAGvBC,EAAa,SAACC,GACvB,OAAOA,EAAKC,cAAgB,IAAML,EAAUI,EAAKE,WAAa,GAAK,IAAMN,EAAUI,EAAKG,Y,0BDjBhFzB,K,cAAAA,E,UAAAA,E,eAAAA,M,KAML,IAAM0B,EAAwB,CAAC1B,EAAY2B,MAAO3B,EAAY4B,IAAK5B,EAAY6B,OEJzEC,EAAW/C,IAAMC,MAAK,WAC/B,IAAM+C,EAASrB,IACTsB,EAAkBD,EAAOpB,SACzBsB,EAAkBF,EAAOnB,WAAa/B,EAASkB,MAAQlB,EAASkB,MAAQlB,EAASiB,MACjFoC,EAAgC,MAAfH,EAAOlB,IAC1BsB,EAAqBJ,EAAOd,YAC3BS,EAAsBU,SAASD,KAChCA,EAAqBnC,EAAY4B,KAPA,MAUL7C,IAAMsD,SAASL,GAVV,mBAU9BrB,EAV8B,KAUpB2B,EAVoB,OAWLvD,IAAMsD,SAASJ,GAXV,mBAW9BrB,EAX8B,KAWpB2B,EAXoB,OAYPxD,IAAMsD,SAASH,GAZR,mBAY9BM,EAZ8B,KAYrBC,EAZqB,OAaC1D,IAAMsD,SAASF,GAbhB,mBAa9BlB,EAb8B,KAajByB,EAbiB,KAerC,OACI,8BACI,yBAAKC,UAAU,kBACX,2BAAOC,QAAQ,YAAf,wBACA,2BAAOC,KAAK,OAAOC,GAAG,WAAW5C,KAAK,WAAW6C,UAAQ,EAACC,YAAY,gBAC/DC,MAAOtC,EAAUuC,SAAU,SAAAC,GAAC,OAAIb,EAAYa,EAAEC,OAAOH,WAGhE,yBAAKN,UAAU,wBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,gBAAf,cACA,2BAAOE,KAAK,QAAQC,GAAG,cAAc5C,KAAK,YAAY+C,MAAOpE,EAASiB,MAC/DuD,QAASzC,IAAa/B,EAASiB,MAAOoD,SAAU,kBAAMX,EAAY1D,EAASiB,UAClF,2BAAO8C,QAAQ,eAAf,cACA,2BAAOC,KAAK,QAAQC,GAAG,cAAc5C,KAAK,YAAY+C,MAAOpE,EAASkB,MAC/DsD,QAASzC,IAAa/B,EAASkB,MAAOmD,SAAU,kBAAMX,EAAY1D,EAASkB,UAClF,2BAAO6C,QAAQ,eAAf,cACA,6BACA,2BAAOC,KAAK,WAAWC,GAAG,eAAe5C,KAAK,MAAM+C,MAAM,OACnDI,QAASb,EAASU,SAAU,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,OAAOC,YAC5D,2BAAOT,QAAQ,gBAAf,wBAGR,yBAAKD,UAAU,wBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,gBAAf,iBACA,2BAAOE,KAAK,QAAQC,GAAG,cAAc5C,KAAK,eAAe+C,MAAOjD,EAAY2B,MACrE0B,QAASpC,IAAgBjB,EAAY2B,MACrCuB,SAAU,kBAAMR,EAAe1C,EAAY2B,UAClD,2BAAOiB,QAAQ,eAAf,SACA,2BAAOC,KAAK,QAAQC,GAAG,YAAY5C,KAAK,eAAe+C,MAAOjD,EAAY4B,IACnEyB,QAASpC,IAAgBjB,EAAY4B,IACrCsB,SAAU,kBAAMR,EAAe1C,EAAY4B,QAClD,2BAAOgB,QAAQ,aAAf,OACA,2BAAOC,KAAK,QAAQC,GAAG,cAAc5C,KAAK,eAAe+C,MAAOjD,EAAY6B,MACrEwB,QAASpC,IAAgBjB,EAAY6B,MACrCqB,SAAU,kBAAMR,EAAe1C,EAAY6B,UAClD,2BAAOe,QAAQ,eAAf,sBAIR,2BAAOD,UAAU,KAAKE,KAAK,SAASI,MAAM,YCEvCK,MAvDf,WAAgB,IAAD,EACmCvE,IAAMsD,UAAS,GADlD,mBACJkB,EADI,KACaC,EADb,OAE2CzE,IAAMsD,SAAS,+BAF1D,mBAEJoB,EAFI,KAEiBC,EAFjB,KAIXC,qBAAU,WAAO,IAAD,EACiCjD,IAAxCC,EADO,EACPA,SAAUC,EADH,EACGA,SAAUC,EADb,EACaA,IAAKI,EADlB,EACkBA,YACzBN,GAAaC,GAAaK,IAC1BpB,EAAmBuC,SAASxB,IAI5Bc,EAAsBU,SAASnB,IAKpCyC,EAAuB,WAAD,OAAY/C,EAAZ,cAA0BC,EAA1B,aLUG,SAACD,EAAkBC,GAChD,IACMgD,EAAMC,UAAU,gBAAD,OAAiBlD,EAAjB,sBAAuCC,IACtDkD,EAAU,UAFM,0DAEN,OAAsBF,GACtC,OAAOG,IAAQC,UACVC,MAAK,kBAAMC,IAAQC,IAAIL,GAAYM,OAAO,uBAC1CH,MAAK,SAAAI,GAIF,OAHIA,EAASC,OAGND,EAASE,KAAKC,gBKnBzBC,CAAkB9D,EAAUC,GACvBqD,MAAK,SAAAS,GACF,IAAMC,EHba,SAACD,GAEhC,IADA,IAAMC,EAAwB,GACrBxF,EAAI,EAAGA,EAAIuF,EAAYtF,OAAQD,IAAK,CAAC,IAAD,EACnCyF,EAAQF,EAAYvF,GACpB0F,EAAeD,EAAME,KACrBC,EAAcH,EAAMI,YAE1B,GAAIJ,EAAMI,YAAYV,SAAW1E,EAAYqF,UAA7C,CAEA,IAAIC,EAAqB,KACrBC,EAAmB,KACvB,GAAIJ,EAAYK,YAAcL,EAAYM,cAClCN,EAAYK,WAAWE,WAAW,iBACnC,UAACP,EAAYM,mBAAb,aAAC,EAAyBC,WAAW,eAAe,CAGvD,GAFAJ,EAAQ,IAAIK,KAAKR,EAAYK,aAC7BD,EAAM,IAAII,KAAKR,EAAYM,cACjBH,EAAV,OAAgC,CAACC,EAAKD,GAApBA,EAAlB,KAAyBC,EAAzB,KACID,EAAMM,gBAAkBL,EAAIK,gBACxBC,MAAMP,EAAMQ,aAAYR,EAAQ,IAAIK,KAAKR,EAAYY,aACzDR,EAAMS,IAAOV,GAAOW,IAAI,EAAG,OAAOC,eAGtCZ,EAAQ,IAAIK,KAAKR,EAAYY,aAC7BR,EAAMS,IAAOV,GAAOW,IAAI,EAAG,OAAOC,UAC9BC,QAAQb,EAAMzD,UAAY,GAGlC,IAAMuE,EAAS,CACXlD,GAAI3D,EACJ8G,QAASpB,EAAaqB,MACtBhB,MAAO7D,EAAW6D,GAClBC,IAAK9D,EAAW8D,IAEpBR,EAAQnF,KAAKwG,IAEjB,OAAOrB,EAAQwB,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAElB,IAAImB,cAAcF,EAAEjB,QGtBxBoB,CAAoB7B,GAC9B8B,EAAiB3F,EAAM,EAAI8D,EAAQ8B,MAAM,EAAG5F,GAAO8D,EACzD+B,QAAQC,IAAR,kBAAuBH,EAAepH,OAAtC,mBAAuDuF,EAAQvF,OAA/D,cHuBiB,SAACuF,EAAuB1D,GACrD,IAAM2F,EAAYC,SAASC,eAAe,iBACpCC,EAAQ,IAAIC,IAAIC,QAAQtC,GACxBuC,EAAU,CACZC,OAAQ,OACRC,MAAO,OACPC,QAAS,QACTC,QAAS,MACTzE,KAAM5B,GAEV,IAAI+F,IAAIO,SAASX,EAAWG,EAAOG,GG/BvBM,CAAkBhB,EAAgBvF,GAClCyC,EAAuB,OAE1B+D,OAAM,SAAAC,GAAK,OAAIhE,EAAuB,UAAD,OAAWgE,EAAMC,cAlBvDjE,EAAuB,sBAAD,OAAuB9C,EAAvB,2BAmB3B,CAAC8C,IAEJ,IAAMkE,EAAiB7I,IAAM8I,aAAY,kBAAMrE,GAAmB,SAAAsE,GAAS,OAAKA,OAAY,IAC5F,OACI,yBAAKnF,UAAU,OACX,yBAAKA,UAAU,YACX,4BAAQoF,QAASH,EAAgBjF,UAAU,mBAA3C,YAAsE,2CACrEY,GACD,yBAAKZ,UAAU,iBACX,yCAAc,mDAAd,0FAEA,kBAAC7D,EAAD,CAAOG,MAAO,CACV,CAAC,wDAAyD,WAC1D,CAAC,6CAA8C,UAC/C,CAAC,6BAA8B,cAEnC,kBAAC6C,EAAD,QAKR,yBAAKgB,GAAG,iBACqB,KAAxBW,GAA8B,yBAAKd,UAAU,cAAcc,MCtD5EuE,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJrB,SAASC,eAAe,W","file":"static/js/main.1e3b3402.chunk.js","sourcesContent":["/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport request from 'superagent';\nimport Promise from 'bluebird';\n\nexport enum ListType {\n    Anime = 'anime',\n    Manga = 'manga',\n}\n\nexport const SupportedListTypes = [ListType.Anime, ListType.Manga];\n\nexport enum EntryStatus {\n    Completed = 'completed',\n    PlanToWatch = 'plan_to_watch',\n    Watching = 'watching',\n}\n\nexport interface ListEntry {\n    node: {\n        id: number;\n        title: string;\n        main_picture: {\n            medium: string;\n            large: string;\n        };\n    };\n    list_status: {\n        status: string;\n        score: number;\n        num_episodes_watched: number;\n        is_rewatching: boolean;\n        updated_at: string;\n        start_date?: string;\n        finish_date?: string;\n    };\n}\n\nexport const getMalListEntries = (username: string, listType: ListType): Promise<ListEntry[]> => {\n    const lambdaBaseUrl = 'https://wkup5ts6yk.execute-api.eu-west-2.amazonaws.com';\n    const uri = encodeURI(`/v1?username=${username}&list_type=${listType}`);\n    const requestUrl = `${lambdaBaseUrl}${uri}`;\n    return Promise.resolve()\n        .then(() => request.get(requestUrl).accept('application/json'))\n        .then(response => {\n            if (response.status !== 200) {\n\n            }\n            return response.body.list_entries as ListEntry[];\n        });\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React from 'react';\n\ninterface LinksProps {\n    links: [string, string][];\n}\n\nexport const Links = React.memo<LinksProps>(({links}) => {\n    const linkComponents = [];\n    for (let i = 0; i < links.length; ++i) {\n        const [url, description] = links[i];\n        const isLast = i === links.length - 1;\n        linkComponents.push(<React.Fragment key={`link-${i}`}>\n            <a href={url}>{description}</a>{isLast ? '' : ', '}\n        </React.Fragment>);\n    }\n    return <p>Links if something is broken: {linkComponents}</p>;\n});\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport moment from 'moment';\n\nimport {formatDate} from './Utils';\nimport {EntryStatus, ListEntry} from './MalApi';\n\nexport enum DisplayType {\n    Point = 'point',\n    Box = 'box',\n    Range = 'range',\n}\n\nexport const SupportedDisplayTypes = [DisplayType.Point, DisplayType.Box, DisplayType.Range];\n\ntype VisJsRecord = { id: number; content: string; start: string; end: string }\ntype VisJsDataset = VisJsRecord[]\n\nexport const prepareVisJsDataset = (listEntries: ListEntry[]): VisJsDataset => {\n    const dataset: VisJsDataset = [];\n    for (let i = 0; i < listEntries.length; i++) {\n        const entry = listEntries[i];\n        const entryDetails = entry.node;\n        const entryStatus = entry.list_status;\n\n        if (entry.list_status.status !== EntryStatus.Completed) continue;\n\n        let start: Date | null = null;\n        let end: Date | null = null;\n        if (entryStatus.start_date && entryStatus.finish_date\n            && !entryStatus.start_date.startsWith('0000-00-00')\n            && !entryStatus.finish_date?.startsWith('0000-00-00')) {\n            start = new Date(entryStatus.start_date);\n            end = new Date(entryStatus.finish_date);\n            if (end < start) [start, end] = [end, start];\n            if (start.toUTCString() === end.toUTCString()) {\n                if (isNaN(start.getTime())) start = new Date(entryStatus.updated_at);\n                end = moment(start).add(1, 'day').toDate();\n            }\n        } else {\n            start = new Date(entryStatus.updated_at);\n            end = moment(start).add(1, 'day').toDate();\n            end.setDate(start.getDate() + 1);\n        }\n\n        const record = {\n            id: i,\n            content: entryDetails.title,\n            start: formatDate(start),\n            end: formatDate(end),\n        };\n        dataset.push(record);\n    }\n    return dataset.sort((a, b) => b.end.localeCompare(a.end));\n};\n\nexport const drawVisJsTimeline = (dataset: VisJsDataset, displayType: DisplayType) => {\n    const container = document.getElementById('visualization');\n    const items = new vis.DataSet(dataset);\n    const options = {\n        height: '100%',\n        align: 'left',\n        zoomMax: 31536000000 * 20,\n        zoomMin: 86400000 * 10,\n        type: displayType,\n    };\n    new vis.Timeline(container, items, options);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nexport const getUrlParameter = (name: string): string => {\n    name = name.replace(/[[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    const regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    // eslint-disable-next-line no-restricted-globals\n    const results = regex.exec(location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\n\nexport const getConfigFromUrlParameters = () => {\n    return {\n        username: getUrlParameter('username'),\n        listType: getUrlParameter('list_type'),\n        cap: Math.round(Number(getUrlParameter('cap'))),\n        displayType: getUrlParameter('display_type'),\n    } as const;\n};\n\nconst padNumber = (x: number): string => {\n    return (x < 10) ? ('0' + x) : x.toString();\n};\n\nexport const formatDate = (date: Date): string => {\n    return date.getFullYear() + '-' + padNumber(date.getMonth() + 1) + '-' + padNumber(date.getDate());\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React from 'react';\n\nimport {ListType} from '../util/MalApi';\nimport {getConfigFromUrlParameters} from '../util/Utils';\nimport {DisplayType, SupportedDisplayTypes} from '../util/Visualisation';\n\n\nexport const Controls = React.memo(() => {\n    const config = getConfigFromUrlParameters();\n    const defaultUsername = config.username;\n    const defaultListType = config.listType === ListType.Manga ? ListType.Manga : ListType.Anime;\n    const defaultCapAt1k = config.cap === 1000;\n    let defaultDisplayType = config.displayType;\n    if (!SupportedDisplayTypes.includes(defaultDisplayType as DisplayType)) {\n        defaultDisplayType = DisplayType.Box;\n    }\n\n    const [username, setUsername] = React.useState(defaultUsername);\n    const [listType, setListType] = React.useState(defaultListType);\n    const [capAt1k, setCapAt1k] = React.useState(defaultCapAt1k);\n    const [displayType, setDisplayType] = React.useState(defaultDisplayType);\n\n    return (\n        <form>\n            <div className=\"username-input\">\n                <label htmlFor=\"username\">Enter your username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required placeholder=\"e.g. Timbo_KZ\"\n                       value={username} onChange={e => setUsername(e.target.value)}/>\n            </div>\n\n            <div className=\"radio-column-wrapper\">\n                <div className=\"radio-column\">\n                    <div className=\"column-title\">List type:</div>\n                    <input type=\"radio\" id=\"radio-anime\" name=\"list_type\" value={ListType.Anime}\n                           checked={listType === ListType.Anime} onChange={() => setListType(ListType.Anime)}/>\n                    <label htmlFor=\"radio-anime\">Anime list</label>\n                    <input type=\"radio\" id=\"radio-manga\" name=\"list_type\" value={ListType.Manga}\n                           checked={listType === ListType.Manga} onChange={() => setListType(ListType.Manga)}/>\n                    <label htmlFor=\"radio-manga\">Manga list</label>\n                    <hr/>\n                    <input type=\"checkbox\" id=\"checkbox-cap\" name=\"cap\" value=\"1000\"\n                           checked={capAt1k} onChange={e => setCapAt1k(e.target.checked)}/>\n                    <label htmlFor=\"checkbox-cap\">Cap at 1000 titles</label>\n                </div>\n            </div>\n            <div className=\"radio-column-wrapper\">\n                <div className=\"radio-column\">\n                    <div className=\"column-title\">Display type:</div>\n                    <input type=\"radio\" id=\"radio-point\" name=\"display_type\" value={DisplayType.Point}\n                           checked={displayType === DisplayType.Point}\n                           onChange={() => setDisplayType(DisplayType.Point)}/>\n                    <label htmlFor=\"radio-point\">Point</label>\n                    <input type=\"radio\" id=\"radio-box\" name=\"display_type\" value={DisplayType.Box}\n                           checked={displayType === DisplayType.Box}\n                           onChange={() => setDisplayType(DisplayType.Box)}/>\n                    <label htmlFor=\"radio-box\">Box</label>\n                    <input type=\"radio\" id=\"radio-range\" name=\"display_type\" value={DisplayType.Range}\n                           checked={displayType === DisplayType.Range}\n                           onChange={() => setDisplayType(DisplayType.Range)}/>\n                    <label htmlFor=\"radio-range\">Range (duration)</label>\n                </div>\n            </div>\n\n            <input className=\"go\" type=\"submit\" value=\"Go!\"/>\n        </form>\n    );\n});\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React, {useEffect} from 'react';\n\nimport './App.css';\nimport {Links} from './Misc';\nimport {Controls} from './Controls';\nimport {getConfigFromUrlParameters} from '../util/Utils';\nimport {ListType, SupportedListTypes, getMalListEntries} from '../util/MalApi';\nimport {DisplayType, drawVisJsTimeline, prepareVisJsDataset, SupportedDisplayTypes} from '../util/Visualisation';\n\n\nfunction App() {\n    const [controlsVisible, setControlsVisible] = React.useState(true);\n    const [visualisationStatus, setVisualisationStatus] = React.useState('Enter your MAL credentials!');\n\n    useEffect(() => {\n        let {username, listType, cap, displayType} = getConfigFromUrlParameters();\n        if (!username || !listType || !displayType) return;\n        if (!SupportedListTypes.includes(listType as ListType)) {\n            setVisualisationStatus(`Invalid list type: ${listType}. Try resubmitting.`);\n            return;\n        }\n        if (!SupportedDisplayTypes.includes(displayType as DisplayType)) {\n            setVisualisationStatus(`Invalid list type: ${listType}. Try resubmitting.`);\n            return;\n        }\n\n        setVisualisationStatus(`Loading ${username}'s ${listType} list...`);\n        getMalListEntries(username, listType as ListType)\n            .then(listEntries => {\n                const dataset = prepareVisJsDataset(listEntries);\n                const dataset_subset = cap > 0 ? dataset.slice(0, cap) : dataset;\n                console.log(`Showing ${dataset_subset.length} out of ${dataset.length} entries.`)\n\n                drawVisJsTimeline(dataset_subset, displayType as DisplayType);\n                setVisualisationStatus('');\n            })\n            .catch(error => setVisualisationStatus(`Error: ${error.message}`));\n    }, [setVisualisationStatus]);\n\n    const toggleControls = React.useCallback(() => setControlsVisible(prevState => !prevState), []);\n    return (\n        <div className=\"App\">\n            <div className=\"controls\">\n                <button onClick={toggleControls} className=\"controls-toggle\">Controls <span>(toggle)</span></button>\n                {controlsVisible &&\n                <div className=\"controls-body\">\n                    <p>Welcome to <strong>MyAnimeTimeline</strong>! This tool lets you visualise your MAL anime and\n                        manga progress throughout the years.</p>\n                    <Links links={[\n                        ['https://foxypanda.me/my-anime-timeline-and-kuristina/', 'Article'],\n                        ['https://github.com/TimboKZ/MyAnimeTimeline', 'GitHub'],\n                        ['https://discord.gg/HT4ttdQ', 'Discord'],\n                    ]}/>\n                    <Controls/>\n                </div>\n                }\n            </div>\n\n            <div id=\"visualization\">\n                {visualisationStatus !== '' && <div className=\"vis-status\">{visualisationStatus}</div>}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}